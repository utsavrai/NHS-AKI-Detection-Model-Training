#!/usr/bin/env python3

import pandas as pd
import csv
import joblib
import argparse
import os

from utils import *

# Prediction function to predict Acute Kidney Injury (AKI) based on input data
def predict_aki(model, input_file, output_file):
    """
    Predict AKI based on the given model and input data, and write predictions to an output file.
    
    Parameters:
    model (sklearn model): Trained model for prediction.
    input_file (str): Path to the CSV file containing test data.
    output_file (str): Path where the output CSV file will be saved.
    """
    try:
        # Determine the maximum number of attributes per row/patient in the input file
        test_max_cols = determine_max_values_in_row(input_file)
        
        # Create headers for missing columns based on maximum attributes
        test_headers = create_headers(test_max_cols, 'test')
        
        # Load the dataframe using the created headers
        test_df = pd.read_csv(input_file, names=test_headers, skiprows=1)
        
        # Create new features based on AKI prediction algorithm parameters
        start_time = time.time()
        test_features = test_df.apply(lambda row: calculate_features(row, 'test', 2), axis=1)
        print("--- %s seconds for feature engineering ---" % (time.time() - start_time))

        # Predict AKI and write to output file
        predictions = model.predict(test_features)
        with open(output_file, 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['aki'])
            for prediction in predictions:
                writer.writerow(['y' if prediction == 1 else 'n'])

    except Exception as e:
        # Handle any exceptions that might occur
        print(f"An error occurred: {e}")

def main():
    """
    Main function to load the model and perform AKI prediction.
    """
    __location__ = os.path.realpath(
        os.path.join(os.getcwd(), os.path.dirname(__file__)))

    parser = argparse.ArgumentParser()
    parser.add_argument("--input", default="test.csv")
    parser.add_argument("--output", default="aki.csv")
    flags = parser.parse_args()

    try:
        # Load the model generated by running train.py
        print("Loading trained model obtained from running train.py")
        model = joblib.load(os.path.join(__location__, 'rf_model.joblib'))
        print("Predicting aki for test data using the loaded model and saving in to aki.csv")
        predict_aki(model, os.path.join(__location__, flags.input), flags.output)
    except FileNotFoundError:
        print("Model file not found. Please ensure the model file is in the correct path.")
    except Exception as e:
        # Handle other exceptions
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
